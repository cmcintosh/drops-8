<?php

/**
* Implements hook_theme
*/
function dragon_theme($existing, $type, $theme, $path) {
  return [
    'dragon_breakpoint_form' => [
      'render element' => 'form',
      'template' => 'dragon-breakpoint-form'
    ],
    'dragon_ab_panel' => [
      'template' => 'dragon-ab-panel'
    ],
    'dragon_builder' => [
      'variables' => [
        'content' => NULL,
      ],
      'template' => 'dragon-builder'
    ],
  ];
}


/**
 * Implements hook_page_attachments().
 */
function dragon_page_attachments(array &$attachments) {
  $attachments['#attached']['library'][] = 'dragon/icons';
}

/**
* Implements hook_preprocess_page
* This helps with A/B variant testing.
*/
function dragon_preprocess_page(&$vars) {
  if (\Drupal::currentUser()->hasPermission('access dragon')) {
    // Get plugins
    $type = \Drupal::service('plugin.manager.grapejs_plugin');
    $plugin_definitions = $type->getDefinitions();

    $pluginData = [
      'plugins' => [],
      'pluginsOpts' => [],
      'library' => [],
      'drupalSettings' => [],
    ];

    foreach($plugin_definitions as $definition) {
      $plugin = $type->createInstance($definition['id'], []);
      $pluginData['plugins'][] = $definition['id'];
      $pluginData['pluginsOpts'][] = $plugin->getOptions();
      $pluginData['library'][] = $plugin->getLibrary();
      $settings = $plugin->drupalSettings();
      foreach($settings as $id => $setting) {
        $pluginData['drupalSettings'][$id] = $setting;
      }
    }

    $current_theme = \Drupal::config('system.theme')->get('default');
    $base_theme = dragon_base_theme($current_theme);
    $dragon_built = built_by_dragon($current_theme);

    // initialize our settings.
    $vars['#attached']['drupalSettings']['dragon'] = [
      'builder' => [
        'state' => FALSE,
        'plugins' => $pluginData['plugins'],
        'pluginOpts' => $pluginData['pluginsOpts'],
        'assets' => [],
        'preLoad' => [],
        'preStore' => [],
      ],
      'page' => [
        'rebuild_theme' => false,
        'base_theme' => $base_theme,
        'current_theme' => $current_theme,
        'dragon_built' => $dragon_built,
        'current_variant' => 'original'
      ],
    ];

    foreach($pluginData['drupalSettings'] as $id => $settings) {
      $vars['#attached']['drupalSettings']['dragon'][$id] = $settings;
    }

    foreach($pluginData['library'] as $id => $library) {
      $vars['#attached']['library'][] = $library;
    }

  }
}

/**
* Implements hook_preprocess_region
*/
function dragon_preprocess_region(&$vars) {
  if (\Drupal::currentUser()->hasPermission('access dragon')) {
    $vars['attributes']['data-region'] = $vars['region'];
  }
}

/**
* Implements hook_preprocess_block
*/
function dragon_preprocess_block(&$vars) {
  if (\Drupal::currentUser()->hasPermission('access dragon')) {
    $vars['elements']['content']['attributes']['data-block-content'] =
      $vars['elements']['content']['#attributes']['data-block-content'] = "1";
  }
}

/**
* Implements hook_preprocess_field
* - This is useful as we can add a wrapper <field></field> tag
* and include data-field attribute.
*/
function dragon_preprocess_field(&$vars) {
  $vars['attributes']['data-field'] = $vars['field_name'];
}


/**
* Gets the base theme name for the theme provided.
*/
function dragon_base_theme($theme) {
  $uri = drupal_get_path('theme', $theme) .  "/{$theme}.info.yml";
  $theme_info = \Symfony\Component\Yaml\Yaml::parse(file_get_contents($uri));
  if (isset($theme_info['base theme'])) {
    return $theme_info['base theme'];
  }
  return '';
}


/**
* returns if this theme was built by dragon.
*/
function built_by_dragon($theme) {
  $uri = drupal_get_path('theme', $theme) .  "/{$theme}.info.yml";
  $theme_info = \Symfony\Component\Yaml\Yaml::parse(file_get_contents($uri));
  return (isset($theme_info['dragon_built']));
}
